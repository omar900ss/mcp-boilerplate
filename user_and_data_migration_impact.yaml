# User Management and Data Migration Impacts for Paddle/Lago Transition

user_management_and_data_migration:
  title: "Impacts on User Management and Data Migration Strategy"
  introduction: >
    This section details the necessary changes to user management practices and outlines
    the conceptual strategy for migrating data from Stripe to the new Paddle and Lago
    ecosystem.

  user_management_impacts:
    title: "User Management Adjustments"
    customer_id_mapping_strategy:
      description: >
        A new mapping strategy is required to link MCP user identities with their
        respective representations in Lago and Paddle.
      mapping:
        - mcp_user_id: "Primary key for a user within MyCloudPlatform's own database."
        - lago_customer_id: >
            Generated by Lago upon customer creation (via API by MCP). MCP will store
            this ID and associate it with the `mcp_user_id`. This ID is essential for all
            billing logic, subscription management, and usage tracking within Lago.
        - paddle_customer_id: >
            Generated by Paddle when a customer first interacts with Paddle's checkout or
            when a payment method is successfully tokenized. MCP will store this ID (or other
            relevant Paddle identifiers like `paddle_subscription_id` for payment linkage)
            and associate it with the `mcp_user_id`. This is used for initiating payments,
            processing refunds, and managing payment methods via Paddle.
      storage: >
        The `lago_customer_id` and `paddle_customer_id` (or equivalent Paddle payment/subscription identifiers)
        will be stored in the MCP user database, alongside the `mcp_user_id`.

    user_state_management_changes:
      description: >
        The application's user state management, currently relying on Stripe customer IDs,
        needs to be updated.
      current_state_example: "`agent.state?.stripe?.customerId`"
      new_state_requirements:
        - field: "`agent.state?.lago?.customerId`"
          purpose: "To store the Lago Customer ID, used for all billing and subscription queries with Lago."
        - field: "`agent.state?.paddle?.customerId`" # Or relevant Paddle payment token/ID
          purpose: "To store the Paddle Customer ID or other identifiers necessary for payment actions with Paddle."
      impact: >
        All parts of the MCP application that currently reference `agent.state?.stripe?.customerId`
        will need to be refactored to use the new Lago and Paddle identifiers. This includes
        areas like displaying billing information, managing subscriptions, and initiating payments.

    authentication_and_authorization_logic:
      description: >
        Access control to MCP services, currently potentially linked to Stripe subscription status,
        will now depend on subscription status information from Lago.
      changes:
        - "Entitlement Checks: Logic that checks for active subscriptions to grant access to features will query Lago (via MCP backend) using the `lago_customer_id` to verify subscription status, plan details, and entitlements."
        - "Webhook Driven Updates: Lago webhooks (e.g., `subscription.activated`, `subscription.terminated`, `subscription.paused`) will trigger updates in the MCP user database, which in turn will affect authorization decisions."
        - "Reduced direct reliance on payment status from Paddle for fine-grained feature access; Lago's subscription status (which is updated based on payment success from Paddle) will be the primary driver."

  data_migration_strategy_conceptual:
    title: "Conceptual Data Migration Strategy from Stripe"
    introduction: >
      Migrating data from Stripe to Paddle and Lago requires a careful, phased approach.
      Direct data transfer is not always possible, especially for sensitive payment information.

    customer_data_migration:
      stripe_data: "Basic customer information (name, email, address, Stripe Customer ID, metadata)."
      lago_mapping:
        - "MCP backend will iterate through Stripe customers."
        - "For each Stripe customer, create a new customer in Lago via API. Store the returned `lago_customer_id`."
        - "Map Stripe Customer ID to the new Lago Customer ID in a temporary migration database/table for tracking."
        - "Customer metadata from Stripe can be selectively migrated to Lago's customer metadata fields or MCP's own database."
      paddle_mapping:
        - "Paddle customer records are typically created when a customer first interacts with Paddle's checkout."
        - "During the payment method re-capture process, when a user enters their payment details with Paddle, Paddle will create its own customer record."
        - "The MCP application will then associate the `mcp_user_id` (and by extension the Stripe Customer ID via the mapping table) with the new Paddle Customer ID or other Paddle identifiers."

    subscription_data_migration:
      stripe_data: "Subscription ID, plan ID, status (active, canceled, past_due), current period end, start date, trial end date, items."
      lago_mapping:
        - "Define new plans in Lago that correspond to existing Stripe plans. Create a mapping (Stripe Plan ID -> Lago Plan ID)."
        - "For each active Stripe subscription:"
          - "Create a new subscription in Lago for the corresponding Lago customer and Lago plan."
          - "Migrate key dates: `start_date`, `current_billing_period_end_date`. If a trial is active, set `trial_ends_at` in Lago."
          - "Set the initial status in Lago (e.g., `active`, `pending_cancellation`). Lago will then manage the lifecycle."
        - "For canceled or past_due subscriptions: Decide whether to migrate them into Lago (e.g., for historical record keeping, potentially as `canceled` or `pending_payment` if an attempt to recover is planned) or keep them in an archived Stripe data export."
        - "The timing of this migration will be critical, likely during a planned maintenance window, coordinated with payment method re-capture."

    payment_methods_migration:
      challenge: >
        Direct migration of raw credit card details (PAN, CVC) or tokenized payment methods
        from Stripe to Paddle is not possible due to PCI DSS compliance restrictions. Stripe
        does not allow exporting raw card data, and Paddle cannot import Stripe's tokens directly
        for processing.
      recapture_strategy:
        - "Notification: Inform users in advance about the change in payment processor and the need to update their payment information."
        - "Guided Re-capture Flow: Upon their next login or a specific prompt, users will be guided to a secure form hosted/managed by Paddle (via Paddle.js or Paddle-hosted pages) to re-enter their payment details."
        - "Association: Once the payment method is added to Paddle, Paddle will provide a token/identifier. MCP application will associate this new Paddle payment method identifier with the user's `mcp_user_id` and `lago_customer_id`."
        - "Grace Period: Consider a grace period for users to update their payment methods before impacting their subscription status, managed by custom logic in MCP coordinated with Lago's dunning capabilities (if any) or subscription controls."
        - "Timing: This should ideally coincide with the migration of subscription data to Lago to ensure continuity of billing once payment methods are active in Paddle."

    payment_history_migration:
      stripe_data: "Charges, invoices, refunds, transaction history."
      options:
        - option_1: "Archive Stripe Data"
          description: >
            Export all payment history (invoices, charges, refunds) from Stripe and store it
            in a secure, accessible archive (e.g., internal database, data warehouse).
            MCP application can provide read-only access to this historical data for users
            or internal teams if needed. New transactions will be recorded in Lago/Paddle.
          pros: "Simpler, less prone to data mapping errors for historical transactional data."
          cons: "Users might need to look in two places for very old vs. new invoices if not presented in a unified UI."
        - option_2: "Partial/Summary Migration to Lago (Less Recommended for Full History)"
          description: >
            Migrate summary data or only recent, open invoices to Lago. For example, creating
            corresponding (potentially simplified) invoice records in Lago for any outstanding
            Stripe invoices to manage their payment collection through the new system.
            Full transactional history migration into Lago is complex and may not align well
            with Lago's data model for past, externally-processed transactions.
          pros: "Potentially unified view for recent/open items."
          cons: "High complexity, risk of data integrity issues, may not be a natural fit for Lago's design."
        - option_3: "Unified UI Layer (Recommended for User Experience)"
          description: >
            Keep Stripe historical data archived (as in Option 1). The MCP application's
            billing portal UI can be designed to fetch and display new invoices from Lago
            and historical invoices from the Stripe data archive, presenting a consolidated view
            to the user, even if the backend data sources are separate.
          pros: "Good user experience, data integrity of historical records maintained, lower migration complexity for payment history itself."
          cons: "Requires development effort for the UI consolidation layer."
      recommendation: >
        A combination of archiving all Stripe data (Option 1) and building a unified UI layer
        (Option 3) is generally the most balanced approach for handling payment history, ensuring
        data integrity and a good user experience. New invoices will be generated and managed by Lago.
```
